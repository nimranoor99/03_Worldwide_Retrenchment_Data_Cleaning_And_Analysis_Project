# Data Cleaning - Need to clean the data for further processing (like visulaization) of data.

-- Step 01-Create Database
-- Step 02-Import Data in Database
-- Step 03- Clean Data

-- ****Step 01-Create Database of name Worldwide_Retrenchment**** 

CREATE schema Worldwide_Retrenchment;



-- ****Step 02-Import Data in Database Worldwide_Retrenchment manually**** 
-- Follow guide in repo "Import Data into MySQL"

-- a. Check imported data to get ready for next step of data cleaning
CREATE TABLE retrenchment_Staging LIKE retrenchment;

SELECT 
    *
FROM
    retrenchment_staging;

-- b. Create Duplicate Table - Insert Data into new table
INSERT retrenchment_staging
SELECT *
FROM retrenchment;

SELECT 
    *
FROM
    retrenchment_staging;
    
-- ****Step 03-Data cleaning in Database Worldwide_Retrenchment by using table retrenchment_staging**** 
-- a. Remove Duplicates - INSERT Row Number
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country,funds_raised_millions) AS Row_Number_Assigned
FROM retrenchment_staging;

-- a. Remove Duplicates - Add CTE to filter the Row Number >1

WITH CTE_Duplicates_Check AS
(
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS Row_Number_Assigned
FROM retrenchment_staging
)
SELECT *
FROM CTE_Duplicates_Check 
WHERE Row_Number_Assigned > 1;

-- a. Remove Duplicates - Verify the Provided Duplicated Values
SELECT 
    *
FROM
    retrenchment_staging
WHERE
    company = 'Casper';

-- b. Remove Duplicates - CTE Update command not support so let's create one table, insert data into it and delete row>2
CREATE TABLE `retrenchment_staging2` (
    `company` TEXT,
    `location` TEXT,
    `industry` TEXT,
    `total_laid_off` INT DEFAULT NULL,
    `percentage_laid_off` TEXT,
    `date` TEXT,
    `stage` TEXT,
    `country` TEXT,
    `funds_raised_millions` INT DEFAULT NULL,
    `Row_Number_Assigned` INT
)  ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE = UTF8MB4_0900_AI_CI;

INSERT INTO  `retrenchment_staging2`
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS Row_Number_Assigned
FROM retrenchment_staging;

DELETE FROM `worldwide_retrenchment`.`retrenchment_staging2` 
WHERE
    worldwide_retrenchment.retrenchment_staging2.Row_Number_Assigned > 1;

SELECT 
    *
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`
WHERE
    worldwide_retrenchment.retrenchment_staging2.Row_Number_Assigned > 1;

-- c. Standarize the data - Remove spaces in comapny name

UPDATE `worldwide_retrenchment`.`retrenchment_staging2` 
SET 
    company = TRIM(company);

-- c. Standarize the data - should be Unique values of Industry like there should be either Crypto or Crypto Currency as industry type
SELECT DISTINCT
    industry
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`;

UPDATE `worldwide_retrenchment`.`retrenchment_staging2` 
SET 
    industry = 'Crypto'
WHERE
    industry LIKE 'Crypto%'
        OR industry LIKE '%Crypto';

-- c. Standarize the data - for country trim the . at the end of united states
SELECT DISTINCT
    country, TRIM(TRAILING '.' FROM country)
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`
ORDER BY 1;

UPDATE `worldwide_retrenchment`.`retrenchment_staging2` 
SET 
    country = TRIM(TRAILING '.' FROM country);

SELECT 
    *
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`
ORDER BY 1;

-- c. Standarize the data - convert date into `date` format
SELECT 
    `date`, STR_TO_DATE(`date`, '%m/%d/%Y')
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`;

UPDATE `worldwide_retrenchment`.`retrenchment_staging2` 
SET 
    `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

-- c. Standarize the data - Change into the date typr for 'date' column

ALTER TABLE `worldwide_retrenchment`.`retrenchment_staging2`
MODIFY COLUMN `date` DATE;

-- d. Null/Blanks Values Check - First start from company and location
SELECT 
    company, location, industry
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`
WHERE
    industry IS NULL OR industry = '';

-- d. Null/Blanks Values Check - in company and location there are no NULL values so let's remove the ''  and NULL values of industry
SELECT 
    *
FROM
    `worldwide_retrenchment`.`retrenchment_staging2` Stage1
        JOIN
    `worldwide_retrenchment`.`retrenchment_staging2` Stage2 ON Stage1.company = stage2.company
        AND Stage1.location = Stage2.location
WHERE
    (Stage1.industry IS NULL
        OR Stage1.industry = '')
        AND Stage2.industry IS NOT NULL;

UPDATE `worldwide_retrenchment`.`retrenchment_staging2` 
SET 
    industry = NULL
WHERE
    industry = '';

UPDATE `worldwide_retrenchment`.`retrenchment_staging2` Stage1
        JOIN
    `worldwide_retrenchment`.`retrenchment_staging2` Stage2 ON Stage1.company = stage2.company
        AND Stage1.location = Stage2.location 
SET 
    Stage1.industry = Stage2.industry
WHERE
    Stage1.industry IS NULL
        AND Stage2.industry IS NOT NULL;

SELECT 
    *
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`
WHERE
    industry IS NULL;

-- d. Null/Blanks Values Check - Remove where total laid and percentage laid are NULL

DELETE FROM `worldwide_retrenchment`.`retrenchment_staging2` 
WHERE
    total_laid_off IS NULL
    AND percentage_laid_off IS NULL;
    
-- e. Remove Unecessary Columns
ALTER TABLE `worldwide_retrenchment`.`retrenchment_staging2`
DROP COLUMN Row_Number_Assigned;

SELECT 
    *
FROM
    `worldwide_retrenchment`.`retrenchment_staging2`;
    
-- Now "worldwide_retrenchment`.`retrenchment_staging2" is cleaned data table and ready for exploratory analysis
